plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'

    id 'idea'
}

ext {
    springCloudVersion = "2023.0.4"
}

group = 'com.podofarm'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

idea {
    module {
        downloadSources = true
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // jjwt-api 의존성
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'

    // jjwt-impl 의존성
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'

    // jjwt-jackson 의존성
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Spring Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //MyBatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'

    // S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //prometheus(metrics)
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // QueryDSL 디펜던시 추가 시작
    /*
    디펜던시명 중간에 버전 정보가 오는 경우, 버전 변수를 작성해
    dependency-management 가 버전을 자동으로 잡아주도록 한다.
     */
    implementation "com.querydsl:querydsl-jpa:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" //java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
    annotationProcessor "jakarta.persistence:jakarta.persistence-api" //java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드
    // QueryDSL 디펜던시 추가 끝

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

//QueryDSL 설정부 시작
/*
QueryDSL 은 별다른 설정이 없으면, 자동으로 QClass 를 만들어 build 디렉토리에 저장한다.
그러나 이렇게 자동 설정된 내용을 쓰면 IntelliJ IDEA 를 이용해서 빌드할 때 문제가 생길 수도 있다.
 */
def generated = "src/main/generated"

//querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

//java sourceSets 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

//'gradle clean' 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}
//QueryDSL 설정부 끝